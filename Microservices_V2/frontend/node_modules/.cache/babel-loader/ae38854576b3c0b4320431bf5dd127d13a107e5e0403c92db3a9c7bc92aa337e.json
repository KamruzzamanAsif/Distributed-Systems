{"ast":null,"code":"var _jsxFileName = \"/home/vamps/Desktop/frontend/src/pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport Navbar from \"../components/navbar\";\nimport Post from \"../components/post\";\nimport AddPost from \"../components/addPost\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const fetchPosts = async () => {\n    try {\n      // Retrieve the JWT token from localStorage\n      const token = localStorage.getItem('token');\n\n      // Set up headers with the JWT token\n      const headers = {\n        Authorization: token ? `${token}` : '' // Include the token if available\n      };\n\n      const response = await axios.get('http://localhost/post/posts', {\n        headers\n      });\n\n      // setPosts(response.data.posts);\n      const filteredPosts = response.data.posts.filter(post => post.user_email !== localStorage.getItem('email'));\n      setPosts(filteredPosts);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n\n      // Check for a 401 Unauthorized response from the server\n      if (error.response && error.response.status === 401) {\n        // Use window.location.href to navigate to the signin page\n        window.location.href = '/';\n      }\n    }\n  };\n  useEffect(() => {\n    // Fetch posts after the component mounts\n    fetchPosts();\n\n    // Fetch posts every 5 seconds (5000 milliseconds)\n    const interval = setInterval(fetchPosts, 5000);\n\n    // Clean up the interval when the component unmounts to avoid memory leaks\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-[#f4f4f5]\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container mx-auto p-4\",\n        children: [/*#__PURE__*/_jsxDEV(AddPost, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n          user_name: post.user_name,\n          content: post.content,\n          imageName: post.image_name\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"eOMWhzEd+CPXEMfdkmXB7v/H3Ds=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Navbar","Post","AddPost","React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","posts","setPosts","notifications","setNotifications","fetchPosts","token","localStorage","getItem","headers","Authorization","response","get","filteredPosts","data","filter","post","user_email","error","console","status","window","location","href","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","user_name","content","imageName","image_name","id","_c","$RefreshReg$"],"sources":["/home/vamps/Desktop/frontend/src/pages/Home.jsx"],"sourcesContent":["import Navbar from \"../components/navbar\";\nimport Post from \"../components/post\";\nimport AddPost from \"../components/addPost\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Home = () => {\n  const [posts, setPosts] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n\n  const fetchPosts = async () => {\n    try {\n      // Retrieve the JWT token from localStorage\n      const token = localStorage.getItem('token');\n\n      // Set up headers with the JWT token\n      const headers = {\n        Authorization: token ? `${token}` : '', // Include the token if available\n      };\n\n      const response = await axios.get('http://localhost/post/posts', { headers });\n\n      // setPosts(response.data.posts);\n      const filteredPosts = response.data.posts.filter((post) => post.user_email !== localStorage.getItem('email'));\n      setPosts(filteredPosts);\n    } catch (error) {\n      console.error('Error fetching posts:', error);\n\n      // Check for a 401 Unauthorized response from the server\n      if (error.response && error.response.status === 401) {\n        // Use window.location.href to navigate to the signin page\n        window.location.href = '/';\n      }\n    }\n  };\n\n  useEffect(() => {\n    // Fetch posts after the component mounts\n    fetchPosts();\n\n    // Fetch posts every 5 seconds (5000 milliseconds)\n    const interval = setInterval(fetchPosts, 5000);\n\n    // Clean up the interval when the component unmounts to avoid memory leaks\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n\n      <div className=\"bg-[#f4f4f5]\">\n        <main className=\"container mx-auto p-4\">\n          <AddPost />\n\n          {posts.map((post) => (\n            <Post\n              key={post.id}\n              user_name={post.user_name}\n              content={post.content}\n              imageName={post.image_name}\n            />\n          ))}\n        </main>\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}